{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
We want a way to readjust child widgets based on the screen orientation or its height and width => Media query, Orientation builder, Layout builder\
\
1. Media query\
- MediaQuery.of(): gives you the size, orientation, and other data about the app running on your current device\
\
2. Orientation builder\
- builder property is a function that has the parent widgets orientation as an argument. You can use this orientation to layout your child widgets.\
\
3. Layout builder\
- builder property is a function that has box constraints as an argument.\
The box constraints give you information about the current constraints such as the parent widgets height or aspect ratio.\

\f1 \

\f0 // The difference between these two builders and the MediaQuery.of method is that they can be specific to one widget instead of to the whole app.\
// If you use these, your build function is automatically re-run when the user changes the app size.\
// You can use this to responsively layout your app\
\
4. Other ways to dynamically adjust an app\'92s display include wrapping an aspect ratio around your widget, which forces it to be a certain aspect ratio, or using a fitted box which scales as child to fit.}